---
title: "Poisson Regression Examples"
author: "Ouwen Jia"
date: today
callout-appearance: minimal # this hides the blue "i" icon on .callout-notes
editor: visual
---

## Blueprinty Case Study

### Introduction

Blueprinty is a small firm that makes software for developing blueprints specifically for submitting patent applications to the US patent office. Their marketing team would like to make the claim that patent applicants using Blueprinty's software are more successful in getting their patent applications approved. Ideal data to study such an effect might include the success rate of patent applications before using Blueprinty's software and after using it. Unfortunately, such data is not available.

However, Blueprinty has collected data on 1,500 mature (non-startup) engineering firms. The data include each firm's number of patents awarded over the last 5 years, regional location, age since incorporation, and whether or not the firm uses Blueprinty's software. The marketing team would like to use this data to make the claim that firms using Blueprinty's software are more successful in getting their patent applications approved.

### Data

```{r load-packages, include=FALSE}
library(ggplot2)
library(readr)
library(dplyr)
```

```{r load-data, include=FALSE}
data <- read_csv("blueprinty.csv")

data <- data %>%
  mutate(
    iscustomer = factor(iscustomer, levels = c(0, 1), labels = c("Non-Customer", "Customer"))
  )
```

#### Distribution of Patents by Customer Status

```{r hist-patents}
ggplot(data, aes(x = patents, fill = iscustomer)) +
  geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
  labs(
    title = "Number of Patents by Customer Status",
    x = "Patents (Last 5 Years)",
    fill = "Customer Status"
  ) +
  theme_minimal()
```

```{r patent-summary}
data %>%
  group_by(iscustomer) %>%
  summarise(
    count = n(),
    mean_patents = mean(patents),
    sd_patents = sd(patents)
  )
```

We observe that Blueprinty customers, on average, have more patents over the past five years. However, this comparison does not yet account for potential confounding variables.

#### Regional Differences by Customer Status

```{r region-bar}
ggplot(data, aes(x = region, fill = iscustomer)) +
  geom_bar(position = "fill") +
  labs(
    title = "Regional Distribution by Customer Status",
    x = "Region",
    y = "Proportion of Firms",
    fill = "Customer Status"
  ) +
  theme_minimal()
```

There are noticeable regional differences in customer adoption. Some regions appear to have a higher share of Blueprinty customers.

#### Firm Age Distribution by Customer Status

```{r age-hist}
ggplot(data, aes(x = age, fill = iscustomer)) +
  geom_histogram(position = "identity", alpha = 0.5, bins = 30) +
  labs(
    title = "Firm Age Distribution by Customer Status",
    x = "Age (Years Since Incorporation)",
    fill = "Customer Status"
  ) +
  theme_minimal()
```

```{r age-summary}
data %>%
  group_by(iscustomer) %>%
  summarise(
    mean_age = mean(age),
    sd_age = sd(age)
  )
```

On average, customers are older firms. Age may therefore be a confounding factor when evaluating patent success.

### Summary

While customers have more patents on average, they also differ in age and region. These structural differences suggest we should adjust for confounding variables in any attempt to infer a causal impact of Blueprinty's software.

### Estimation of Simple Poisson Model

Since our outcome variable of interest can only be small integer values per a set unit of time, we can use a Poisson density to model the number of patents awarded to each engineering firm over the last 5 years. We start by estimating a simple Poisson model via Maximum Likelihood.

The probability mass function for a Poisson distribution is:

$f(Y | \lambda) = \frac{e^{-\lambda} \lambda^Y}{Y!}$

We treat the observed number of patents as realizations from this distribution.

#### Log-Likelihood Function in R

```{r poisson-loglikelihood}
# Log-likelihood function for Poisson model
poisson_loglikelihood <- function(lambda, Y) {
  if (lambda <= 0) return(-Inf)  # Poisson lambda must be positive
  sum(dpois(Y, lambda, log = TRUE))
}
```

#### Plotting the Log-Likelihood Curve

We use the observed number of patents as input to our log-likelihood function.

```{r plot-loglikelihood}
Y_obs <- data$patents
lambda_vals <- seq(0.1, 10, by = 0.1)
loglik_vals <- sapply(lambda_vals, function(l) poisson_loglikelihood(l, Y_obs))

plot(lambda_vals, loglik_vals, type = "l", lwd = 2,
     main = "Log-Likelihood of Poisson Model",
     xlab = expression(lambda), ylab = "Log-Likelihood")
```

#### Maximum Likelihood Estimation (MLE)

We now use `optim()` to find the value of lambda that maximizes the log-likelihood.

```{r poisson-mle}
mle_result <- optim(par = 1, fn = function(l) -poisson_loglikelihood(l, Y_obs),
                    method = "Brent", lower = 0.01, upper = 20)

lambda_mle <- mle_result$par
lambda_mle
```

The MLE for $\lambda$ is the sample mean of $Y$, which is consistent with theory: for Poisson-distributed data, $\hat{\lambda}_{MLE} = \bar{Y}$.

```{r sample-mean}
mean(Y_obs)
```

### Estimation of Poisson Regression Model

Next, we extend our simple Poisson model to a Poisson Regression Model such that $Y_i = \text{Poisson}(\lambda_i)$ where $\lambda_i = \exp(X_i'\beta)$. The interpretation is that the success rate of patent awards is not constant across all firms ($\lambda$) but rather is a function of firm characteristics $X_i$. Specifically, we will use the covariates age, age squared, region, and whether the firm is a customer of Blueprinty.

*todo: Update your likelihood or log-likelihood function with an additional argument to take in a covariate matrix X. Also change the parameter of the model from lambda to the beta vector. In this model, lambda must be a positive number, so we choose the inverse link function g_inv() to be exp() so that* $\lambda_i = e^{X_i'\beta}$. *For example:*

```         
poisson_regression_likelihood <- function(beta, Y, X){
   ...
}
```

*todo: Use your function along with R's optim() or Python's sp.optimize() to find the MLE vector and the Hessian of the Poisson model with covariates. Specifically, the first column of X should be all 1's to enable a constant term in the model, and the subsequent columns should be age, age squared, binary variables for all but one of the regions, and the binary customer variable. Use the Hessian to find standard errors of the beta parameter estimates and present a table of coefficients and standard errors.*

*todo: Check your results using R's glm() function or Python sm.GLM() function.*

*todo: Interpret the results.*

*todo: What do you conclude about the effect of Blueprinty's software on patent success? Because the beta coefficients are not directly interpretable, it may help to create two fake datasets: X_0 and X_1 where X_0 is the X data but with iscustomer=0 for every observation and X_1 is the X data but with iscustomer=1 for every observation. Then, use X_0 and your fitted model to get the vector of predicted number of patents (y_pred_0) for every firm in the dataset, and use X_1 to get Y_pred_1 for every firm. Then subtract y_pred_1 minus y_pred_0 and take the average of that vector of differences.*

## AirBnB Case Study

### Introduction

AirBnB is a popular platform for booking short-term rentals. In March 2017, students Annika Awad, Evan Lebo, and Anna Linden scraped of 40,000 Airbnb listings from New York City. The data include the following variables:

::: {.callout-note collapse="true"}
### Variable Definitions

```         
- `id` = unique ID number for each unit
- `last_scraped` = date when information scraped
- `host_since` = date when host first listed the unit on Airbnb
- `days` = `last_scraped` - `host_since` = number of days the unit has been listed
- `room_type` = Entire home/apt., Private room, or Shared room
- `bathrooms` = number of bathrooms
- `bedrooms` = number of bedrooms
- `price` = price per night (dollars)
- `number_of_reviews` = number of reviews for the unit on Airbnb
- `review_scores_cleanliness` = a cleanliness score from reviews (1-10)
- `review_scores_location` = a "quality of location" score from reviews (1-10)
- `review_scores_value` = a "quality of value" score from reviews (1-10)
- `instant_bookable` = "t" if instantly bookable, "f" if not
```
:::

*todo: Assume the number of reviews is a good proxy for the number of bookings. Perform some exploratory data analysis to get a feel for the data, handle or drop observations with missing values on relevant variables, build one or more models (e.g., a poisson regression model for the number of bookings as proxied by the number of reviews), and interpret model coefficients to describe variation in the number of reviews as a function of the variables provided.*{r patent-summary} data %\>% group_by(iscustomer) %\>% summarise( count = n(), mean_patents = mean(patents), sd_patents = sd(patents) )